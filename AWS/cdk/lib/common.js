"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnv = void 0;
require('dotenv').config();
// Returns value of given environment variable, which may be read from .env file.
// If the optional flag is passed as true, then if the variable is not set then undefined is returned.
// Thus it is safe to use ! to assert a variable is not undefined if the optional flag is true or missing.
// If optional is missing or false then if the variable is missing an exception is thrown.
function getEnv(name, optional = true) {
    const val = process.env[name];
    if (!val && !optional) {
        console.error(`${name} env var not set`);
        throw new Error(`${name} env var not set`);
    }
    return val;
}
exports.getEnv = getEnv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQU8xQixpRkFBaUY7QUFDakYsc0dBQXNHO0FBQ3RHLDBHQUEwRztBQUMxRywwRkFBMEY7QUFDMUYsU0FBZ0IsTUFBTSxDQUFDLElBQVksRUFBRSxXQUFvQixJQUFJO0lBQzNELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNuQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLGtCQUFrQixDQUFDLENBQUM7S0FDOUM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFQRCx3QkFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XHJcbmltcG9ydCB7IGF3c19keW5hbW9kYiBhcyBkeW5hbW9kYiB9IGZyb20gJ2F3cy1jZGstbGliJztcclxuXHJcbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExhbWJkYVN0YWNrUHJvcHMgZXh0ZW5kcyBjZGsuU3RhY2tQcm9wcyB7XHJcbiAgcmVhZG9ubHkgdGVtcGVyYXR1cmVIaXN0b3J5VGFibGU6IGR5bmFtb2RiLlRhYmxlO1xyXG4gIHJlYWRvbmx5IGxhc3RTZW5zb3JSZWFkaW5nVGFibGU6IGR5bmFtb2RiLlRhYmxlO1xyXG59XHJcblxyXG4vLyBSZXR1cm5zIHZhbHVlIG9mIGdpdmVuIGVudmlyb25tZW50IHZhcmlhYmxlLCB3aGljaCBtYXkgYmUgcmVhZCBmcm9tIC5lbnYgZmlsZS5cclxuLy8gSWYgdGhlIG9wdGlvbmFsIGZsYWcgaXMgcGFzc2VkIGFzIHRydWUsIHRoZW4gaWYgdGhlIHZhcmlhYmxlIGlzIG5vdCBzZXQgdGhlbiB1bmRlZmluZWQgaXMgcmV0dXJuZWQuXHJcbi8vIFRodXMgaXQgaXMgc2FmZSB0byB1c2UgISB0byBhc3NlcnQgYSB2YXJpYWJsZSBpcyBub3QgdW5kZWZpbmVkIGlmIHRoZSBvcHRpb25hbCBmbGFnIGlzIHRydWUgb3IgbWlzc2luZy5cclxuLy8gSWYgb3B0aW9uYWwgaXMgbWlzc2luZyBvciBmYWxzZSB0aGVuIGlmIHRoZSB2YXJpYWJsZSBpcyBtaXNzaW5nIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFbnYobmFtZTogc3RyaW5nLCBvcHRpb25hbDogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gIGNvbnN0IHZhbCA9IHByb2Nlc3MuZW52W25hbWVdO1xyXG4gIGlmICghdmFsICYmICFvcHRpb25hbCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGAke25hbWV9IGVudiB2YXIgbm90IHNldGApO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gZW52IHZhciBub3Qgc2V0YCk7XHJcbiAgfVxyXG4gIHJldHVybiB2YWw7XHJcbn1cclxuIl19