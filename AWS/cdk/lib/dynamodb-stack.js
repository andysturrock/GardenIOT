"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoDBStack = void 0;
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
class DynamoDBStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.temperatureHistoryTable = new aws_cdk_lib_1.aws_dynamodb.Table(this, 'TemperatureHistoryTable', {
            tableName: "TemperatureHistory",
            partitionKey: { name: 'timestamp', type: aws_cdk_lib_1.aws_dynamodb.AttributeType.NUMBER },
            sortKey: { name: "sensor_id", type: aws_cdk_lib_1.aws_dynamodb.AttributeType.NUMBER },
            readCapacity: 1,
            writeCapacity: 1,
            removalPolicy: cdk.RemovalPolicy.DESTROY
        });
        let readScaling = this.temperatureHistoryTable.autoScaleReadCapacity({ minCapacity: 1, maxCapacity: 10 });
        readScaling.scaleOnUtilization({ targetUtilizationPercent: 70 });
        let writeScaling = this.temperatureHistoryTable.autoScaleWriteCapacity({ minCapacity: 1, maxCapacity: 10 });
        writeScaling.scaleOnUtilization({ targetUtilizationPercent: 70 });
        this.lastSensorReadingTable = new aws_cdk_lib_1.aws_dynamodb.Table(this, 'LastSensorReadingTable', {
            tableName: "LastSensorReading",
            partitionKey: { name: 'sensor_type', type: aws_cdk_lib_1.aws_dynamodb.AttributeType.STRING },
            sortKey: { name: "sensor_id", type: aws_cdk_lib_1.aws_dynamodb.AttributeType.NUMBER },
            readCapacity: 1,
            writeCapacity: 1,
            removalPolicy: cdk.RemovalPolicy.DESTROY
        });
        readScaling = this.lastSensorReadingTable.autoScaleReadCapacity({ minCapacity: 1, maxCapacity: 10 });
        readScaling.scaleOnUtilization({ targetUtilizationPercent: 70 });
        writeScaling = this.lastSensorReadingTable.autoScaleWriteCapacity({ minCapacity: 1, maxCapacity: 10 });
        writeScaling.scaleOnUtilization({ targetUtilizationPercent: 70 });
        // Create exports from the CF template so that CF knows that other stacks depend on this stack.
        this.exportValue(this.temperatureHistoryTable.tableArn);
        this.exportValue(this.lastSensorReadingTable.tableArn);
    }
}
exports.DynamoDBStack = DynamoDBStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vZGItc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkeW5hbW9kYi1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBb0M7QUFDcEMsNkNBQXVEO0FBRXZELE1BQWEsYUFBYyxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBSTFDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksMEJBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLHlCQUF5QixFQUFFO1lBQ2pGLFNBQVMsRUFBRSxvQkFBb0I7WUFDL0IsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsMEJBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO1lBQ3hFLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLDBCQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUNuRSxZQUFZLEVBQUUsQ0FBQztZQUNmLGFBQWEsRUFBRSxDQUFDO1lBQ2hCLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87U0FDekMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsRUFBRSx3QkFBd0IsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUcsWUFBWSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsd0JBQXdCLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVsRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSwwQkFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsd0JBQXdCLEVBQUU7WUFDL0UsU0FBUyxFQUFFLG1CQUFtQjtZQUM5QixZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSwwQkFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDMUUsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsMEJBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO1lBQ25FLFlBQVksRUFBRSxDQUFDO1lBQ2YsYUFBYSxFQUFFLENBQUM7WUFDaEIsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTztTQUN6QyxDQUFDLENBQUM7UUFDSCxXQUFXLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLHFCQUFxQixDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsRUFBRSx3QkFBd0IsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLFlBQVksR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsc0JBQXNCLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZHLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLHdCQUF3QixFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFbEUsK0ZBQStGO1FBQy9GLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRjtBQXJDRCxzQ0FxQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcclxuaW1wb3J0ICogYXMgY2RrICBmcm9tICdhd3MtY2RrLWxpYic7XHJcbmltcG9ydCB7IGF3c19keW5hbW9kYiBhcyBkeW5hbW9kYiB9IGZyb20gJ2F3cy1jZGstbGliJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEeW5hbW9EQlN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcclxuICBwdWJsaWMgcmVhZG9ubHkgdGVtcGVyYXR1cmVIaXN0b3J5VGFibGU6IGR5bmFtb2RiLlRhYmxlO1xyXG4gIHB1YmxpYyByZWFkb25seSBsYXN0U2Vuc29yUmVhZGluZ1RhYmxlOiBkeW5hbW9kYi5UYWJsZTtcclxuXHJcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xyXG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XHJcblxyXG4gICAgdGhpcy50ZW1wZXJhdHVyZUhpc3RvcnlUYWJsZSA9IG5ldyBkeW5hbW9kYi5UYWJsZSh0aGlzLCAnVGVtcGVyYXR1cmVIaXN0b3J5VGFibGUnLCB7XHJcbiAgICAgIHRhYmxlTmFtZTogXCJUZW1wZXJhdHVyZUhpc3RvcnlcIixcclxuICAgICAgcGFydGl0aW9uS2V5OiB7IG5hbWU6ICd0aW1lc3RhbXAnLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLk5VTUJFUiB9LFxyXG4gICAgICBzb3J0S2V5OiB7IG5hbWU6IFwic2Vuc29yX2lkXCIsIHR5cGU6IGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuTlVNQkVSIH0sXHJcbiAgICAgIHJlYWRDYXBhY2l0eTogMSxcclxuICAgICAgd3JpdGVDYXBhY2l0eTogMSxcclxuICAgICAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWVxyXG4gICAgfSk7XHJcbiAgICBsZXQgcmVhZFNjYWxpbmcgPSB0aGlzLnRlbXBlcmF0dXJlSGlzdG9yeVRhYmxlLmF1dG9TY2FsZVJlYWRDYXBhY2l0eSh7IG1pbkNhcGFjaXR5OiAxLCBtYXhDYXBhY2l0eTogMTAgfSk7XHJcbiAgICByZWFkU2NhbGluZy5zY2FsZU9uVXRpbGl6YXRpb24oeyB0YXJnZXRVdGlsaXphdGlvblBlcmNlbnQ6IDcwIH0pO1xyXG4gICAgbGV0IHdyaXRlU2NhbGluZyA9IHRoaXMudGVtcGVyYXR1cmVIaXN0b3J5VGFibGUuYXV0b1NjYWxlV3JpdGVDYXBhY2l0eSh7IG1pbkNhcGFjaXR5OiAxLCBtYXhDYXBhY2l0eTogMTAgfSk7XHJcbiAgICB3cml0ZVNjYWxpbmcuc2NhbGVPblV0aWxpemF0aW9uKHsgdGFyZ2V0VXRpbGl6YXRpb25QZXJjZW50OiA3MCB9KTtcclxuXHJcbiAgICB0aGlzLmxhc3RTZW5zb3JSZWFkaW5nVGFibGUgPSBuZXcgZHluYW1vZGIuVGFibGUodGhpcywgJ0xhc3RTZW5zb3JSZWFkaW5nVGFibGUnLCB7XHJcbiAgICAgIHRhYmxlTmFtZTogXCJMYXN0U2Vuc29yUmVhZGluZ1wiLFxyXG4gICAgICBwYXJ0aXRpb25LZXk6IHsgbmFtZTogJ3NlbnNvcl90eXBlJywgdHlwZTogZHluYW1vZGIuQXR0cmlidXRlVHlwZS5TVFJJTkcgfSxcclxuICAgICAgc29ydEtleTogeyBuYW1lOiBcInNlbnNvcl9pZFwiLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLk5VTUJFUiB9LFxyXG4gICAgICByZWFkQ2FwYWNpdHk6IDEsXHJcbiAgICAgIHdyaXRlQ2FwYWNpdHk6IDEsXHJcbiAgICAgIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1lcclxuICAgIH0pO1xyXG4gICAgcmVhZFNjYWxpbmcgPSB0aGlzLmxhc3RTZW5zb3JSZWFkaW5nVGFibGUuYXV0b1NjYWxlUmVhZENhcGFjaXR5KHsgbWluQ2FwYWNpdHk6IDEsIG1heENhcGFjaXR5OiAxMCB9KTtcclxuICAgIHJlYWRTY2FsaW5nLnNjYWxlT25VdGlsaXphdGlvbih7IHRhcmdldFV0aWxpemF0aW9uUGVyY2VudDogNzAgfSk7XHJcbiAgICB3cml0ZVNjYWxpbmcgPSB0aGlzLmxhc3RTZW5zb3JSZWFkaW5nVGFibGUuYXV0b1NjYWxlV3JpdGVDYXBhY2l0eSh7IG1pbkNhcGFjaXR5OiAxLCBtYXhDYXBhY2l0eTogMTAgfSk7XHJcbiAgICB3cml0ZVNjYWxpbmcuc2NhbGVPblV0aWxpemF0aW9uKHsgdGFyZ2V0VXRpbGl6YXRpb25QZXJjZW50OiA3MCB9KTtcclxuXHJcbiAgICAvLyBDcmVhdGUgZXhwb3J0cyBmcm9tIHRoZSBDRiB0ZW1wbGF0ZSBzbyB0aGF0IENGIGtub3dzIHRoYXQgb3RoZXIgc3RhY2tzIGRlcGVuZCBvbiB0aGlzIHN0YWNrLlxyXG4gICAgdGhpcy5leHBvcnRWYWx1ZSh0aGlzLnRlbXBlcmF0dXJlSGlzdG9yeVRhYmxlLnRhYmxlQXJuKTtcclxuICAgIHRoaXMuZXhwb3J0VmFsdWUodGhpcy5sYXN0U2Vuc29yUmVhZGluZ1RhYmxlLnRhYmxlQXJuKTtcclxuICB9XHJcbn1cclxuIl19